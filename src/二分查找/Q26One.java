package 二分查找;

/**
 * 26. 删除有序数组中的重复项
 * 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。
 * 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
 */
public class Q26One {
    public int removeDuplicates(int[] nums) {
//        将数组长度取出来（n）
        int n = nums.length;
//        如果数组中没有元素则返回0
        if (n == 0){
            return 0;
        }
//        定义一个快指针一个慢指针
        int fast = 1,slow = 1;
//        不断向右移动右指针来遍历数组中的元素
//        如果数组中至少包含一个元素，因为是有序数组，即使有重复元素，在删除重复元素之后也至少剩下一个元素，
//        因此[0] 保持原状即可，从下标1开始删除重复元素。
        while (fast<n){
//            如果数组中有相同元素，那么数组元素下标一定是连续的，所以只需要判断fast和它前一位的元素是否相等即可
            if (nums[fast] != nums[fast-1]){
//                如果不想等则表示不是相同元素，表示此时fast下标位置的元素是一个新元素，所以把当前元素赋值给
//                slow当前下标得元素上
//                ps：如果是一个元素都不相同的数组，那么每一次遍历fast和slow的下标位置都是一样的
                nums[slow] = nums[fast];
//                然后把slow指针向右移动
                slow++;
            }
//            每次循环都需要把fast向右移动一个单位来不断遍历数组
            ++fast;
        }
//        因为slow是从一开始，所以最后slow的下标就是新数组长度
        return slow;
    }
}
